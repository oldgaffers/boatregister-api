AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.
Resources:
  boatregisterapi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: boatregister-api
      Description: An AWS lambda function that sits behind an api gateway.
      MemorySize: 256
      Timeout: 20
      Handler: lambda_function.lambda_handler
      InlineCode: >-
        def lambda_handler(event, context):
          print('Checking {} at {}...'.format(SITE, event['time']))      
      Runtime: python3.13
      Architectures:
        - arm64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Environment:
        Variables:
          ID_POOL: 5110b2a1-6761-40f9-bd39-3d00bf8f5629
          UPLOAD_BUCKET: boatregister-upload
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: GITHUB_TOKEN
        - SSMParameterReadPolicy:
            ParameterName: MAIL_*
        - SSMParameterReadPolicy:
            ParameterName: GOOGLE/GEO_API_KEY
        - SSMParameterReadPolicy:
            ParameterName: SERPAPI/*
        - SSMParameterReadPolicy:
            ParameterName: OPENAI/*
        - SSMParameterReadPolicy:
            ParameterName: GEMINI/*
        - SNSPublishMessagePolicy:
            TopicName: boatenquiry
        - DynamoDBCrudPolicy:
            TableName: public_*
        - DynamoDBCrudPolicy:
            TableName: member_*
        - DynamoDBCrudPolicy:
            TableName: geonames_cache 
        - DynamoDBReadPolicy:
            TableName: members 
        - SESCrudPolicy:
            IdentityName: '*'
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:ListTables
              Resource: '*'
      Events:
        Api1:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /{scope}/{table+}
        Api2:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /{scope}/{table+}
        public:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /public/{table+}
            Auth:
              Authorizer: NONE
        shuffle:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /shuffle
        uc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /upload_credentials
            Auth:
              Authorizer: NONE
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: default
      CorsConfiguration:
        AllowOrigins:
          - "https://oga.org.uk"
          - "https://www.oga.org.uk"
          - "http://localhost:3000"
          - "http://localhost:5173"
        AllowHeaders:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - OPTIONS
        MaxAge: 600
        AllowCredentials: false
      Auth:
        Authorizers:
          OAuth2Authorizer:
#            AuthorizationScopes:
#              - scope1
#              - scope2
            JwtConfiguration:
              issuer: "https://dev-uf87e942.eu.auth0.com/"
              audience:
                - https://oga.org.uk/boatregister
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuth2Authorizer